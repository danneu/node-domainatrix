// Generated by CoffeeScript 1.3.1
var DomainParser, fs, urlParser;

fs = require("fs");

urlParser = require("url");

DomainParser = (function() {

  DomainParser.name = 'DomainParser';

  function DomainParser(fileName) {
    this.publicSuffixes = {};
    this.readDatFile(fileName);
  }

  DomainParser.prototype.readDatFile = function(fileName) {
    var datFile, line, part, parts, subHash, _i, _j, _len, _len1, _ref;
    datFile = fs.readFileSync(fileName, "utf8");
    _ref = datFile.split("\n");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      line = line.trim();
      if (!(line.match(/\/\//) || line.length === 0)) {
        parts = line.split(".").reverse();
        subHash = this.publicSuffixes;
        for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
          part = parts[_j];
          subHash = (subHash[part] || (subHash[part] = {}));
        }
      }
    }
    return this.publicSuffixes;
  };

  DomainParser.prototype.parse = function(url) {
    var part, path, pathParts, prop, uri, uriHash;
    if (!(url != null ? url.trim() : void 0)) {
      return {};
    }
    if (!url.match(/:\/\//)) {
      url = "http://" + url;
    }
    uri = urlParser.parse(url);
    path = uri.path;
    pathParts = uri.pathname.split("/");
    pathParts = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = pathParts.length; _i < _len; _i++) {
        part = pathParts[_i];
        if (part.length !== 0) {
          _results.push(part);
        }
      }
      return _results;
    })();
    uri.basename = pathParts[pathParts.length - 1];
    if (uri.hostname === "localhost") {
      uriHash = {
        publicSuffix: "",
        domain: "localhost",
        subdomain: ""
      };
    } else {
      uriHash = this.parseDomainsFromHost(uri.hostname || uri.basename);
    }
    for (prop in uri) {
      uriHash[prop] = uri[prop];
    }
    uriHash.url = url;
    return uriHash;
  };

  DomainParser.prototype.parseDomainsFromHost = function(hostname) {
    var domain, i, part, parts, publicSuffix, subHash, subParts, subdomains, _i, _len;
    if (!hostname) {
      return {};
    }
    parts = hostname.split(".").reverse();
    publicSuffix = [];
    domain = "";
    subdomains = [];
    subHash = this.publicSuffixes;
    for (i = _i = 0, _len = parts.length; _i < _len; i = ++_i) {
      part = parts[i];
      subHash = subParts = subHash[part] || {};
      if ("*" in subParts) {
        publicSuffix = publicSuffix.concat(part);
        publicSuffix = publicSuffix.concat(parts[i + 1]);
        domain = parts[i + 2];
        subdomains = parts.slice(i + 3, parts.size) || [];
        break;
      } else if (subParts.length === 0 || !(parts[i + 1] in subParts)) {
        publicSuffix = publicSuffix.concat(part);
        domain = parts[i + 1];
        subdomains = parts.slice(i + 2, parts.size) || [];
        break;
      } else {
        publicSuffix = publicSuffix.concat(part);
      }
    }
    return {
      publicSuffix: publicSuffix.reverse().join("."),
      domain: domain,
      subdomain: subdomains.reverse().join(".")
    };
  };

  return DomainParser;

})();

module.exports = DomainParser;
